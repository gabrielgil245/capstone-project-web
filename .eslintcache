[{"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\index.js":"1","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\reportWebVitals.js":"2","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\App.js":"3","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\dashboard.js":"4","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\navbar.js":"5","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\sidebar.js":"6","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\results.js":"7"},{"size":529,"mtime":1616638624378,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":5484,"mtime":1617597651155,"results":"11","hashOfConfig":"9"},{"size":6796,"mtime":1617596772070,"results":"12","hashOfConfig":"9"},{"size":642,"mtime":1617598396110,"results":"13","hashOfConfig":"9"},{"size":1012,"mtime":1617597533047,"results":"14","hashOfConfig":"9"},{"size":2996,"mtime":1617596431020,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"txrage",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\index.js",[],["35","36"],"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\reportWebVitals.js",[],"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\App.js",["37","38","39"],"import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Dashboard from \"./dashboard\";\n\nimport React, {useEffect, useState} from \"react\";\nimport { Button, notification } from 'antd';\n\n// https://boiling-waters-15789.herokuapp.com/\n\nfunction Auth() {\n\n  let apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n  const [emailLogin, setEmailLogin] = useState('');\n  const [emailSignUp, setEmailSignUp] = useState('');\n  const [passwordLogin, setPasswordLogin] = useState('');\n  const [passwordSignUp, setPasswordSignUp] = useState('');\n  const [retypePassword, setRetypePassword] = useState('');\n\n  const onSignIn = async (event) => {\n    event.preventDefault();\n    // console.log(emailLogin);\n    // console.log(passwordLogin);\n\n    let loginBody = { \n      email: emailLogin,\n      password: passwordLogin\n    }\n\n    let options = {\n      method: 'POST',\n      body: JSON.stringify(loginBody),\n      headers: {}\n    };\n    options.headers[\"Accept\"] = \"application/json, text/plain, */*\";\n    options.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n    // console.log(options);\n    \n    const res = await fetch(`${apiUrl}/api/v1/login`, options);\n\n    let data = await res.json();\n    // console.log(data);\n    if(data.token){\n      localStorage.setItem('token', data.token);\n      window.location.href='/dashboard';\n    }\n    \n  }\n\n  const onSignUp = async (event) => {\n    event.preventDefault();\n    // console.log(emailSignUp);\n    // console.log(passwordSignUp);\n\n    let signupBody = { \n      email: emailSignUp,\n      password: passwordSignUp\n    }\n\n    let options = {\n      method: 'POST',\n      body: JSON.stringify(signupBody),\n      headers: {}\n    };\n    options.headers[\"Accept\"] = \"application/json, text/plain, */*\";\n    options.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n    // console.log(options);\n    \n    const res = await fetch(`${apiUrl}/api/v1/signup`, options);\n    \n    let data = await res.json();\n    console.log(data);\n    if(data.success){\n      notification['success']({\n        message:'Received',\n        description:\n        \"All set! You may now login using your credentials.\",\n      })\n    }\n\n  }\n\n  return (\n    <>\n      {/* Navbar */}\n      <div className={\"grid grid-cols-12\"}>\n        <h1 className={\"col-span-full text-center text-2xl text-white uppercase tracking-wider bg-blue-700 p-4\"}>\n          Guide Me Login\n        </h1>\n\n        {/* Log In */}\n        <div className={\"col-start-2 col-span-10 md:col-start-3 md:col-span-8 shadow-lg p-8\"}>\n          <h1 className={\"text-center text-2xl p-2\"}>Sign In</h1>\n          <form className={\"grid grid-cols-12\"} onSubmit={onSignIn}>\n            <input type=\"email\" value={emailLogin} onChange={(event) => setEmailLogin(event.currentTarget.value)} \n              required className={\"border col-span-full lg:col-start-2 lg:col-span-10 rounded p-2 m-4\"} placeholder={\"Email address\"}/>\n            <input type=\"password\" value={passwordLogin} onChange={(event) => setPasswordLogin(event.currentTarget.value)} \n              required className={\"border col-span-full lg:col-start-2 lg:col-span-10 rounded p-2 m-4\"} placeholder={\"Password\"}/>\n            <Button type={\"primary\"} htmlType={\"submit\"} \n              className={\"col-start-5 col-span-4 lg:col-start-6 lg:col-span-2\"}>\n                Log In\n            </Button>\n\n          </form>\n        </div>\n\n        <div className={\"col-span-full\"}>\n          <br/>\n        </div>\n\n        {/* Sign Up */}\n        <div className={\"col-start-2 col-span-10 md:col-start-3 md:col-span-8 shadow-lg p-8\"}>\n          <h1 className={\"text-center text-2xl p-2\"}>Sign Up</h1>\n          <form className={\"grid grid-cols-12\"} onSubmit={onSignUp}>\n            <input type=\"email\" value={emailSignUp} onChange={(event) => setEmailSignUp(event.currentTarget.value)} \n              required className={\"border col-span-full lg:col-start-2 lg:col-span-10 rounded p-2 m-4\"} placeholder={\"Email address\"}/>\n            <input type=\"password\" value={passwordSignUp} onChange={(event) => setPasswordSignUp(event.currentTarget.value)} \n              required className={\"border col-span-full lg:col-start-2 lg:col-span-10 rounded p-2 m-4\"} placeholder={\"Password\"}/>\n             <input type=\"password\" value={retypePassword} onChange={(event) => setRetypePassword(event.currentTarget.value)} \n              required className={\"border col-span-full lg:col-start-2 lg:col-span-10 rounded p-2 m-4\"} placeholder={'Retype Password'}/>\n             {(passwordSignUp != retypePassword) && <small className={'text-red-500 font-bold'}>Passwords don't match</small>}\n            <Button type={\"primary\"} htmlType={\"submit\"} \n              className={\"col-start-4 col-span-6 md:col-start-5 md:col-span-4 lg:col-start-6 lg:col-span-2\"}>\n                Sign Up\n            </Button>\n\n          </form>\n        </div>\n      </div>\n\n    </>\n  );\n}\n\nfunction App() {\n    \n  return (\n    <>\n      <Router>\n          <div>\n              {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n              <Switch>\n                  <Route path=\"/dashboard\">\n                      <Dashboard />\n                  </Route>\n                  <Route path=\"/\">\n                      <Auth />\n                  </Route>\n              </Switch>\n          </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\dashboard.js",["40","41","42","43"],"import './App.css';\nimport Navbar from \"./navbar\";\nimport Sidebar from \"./sidebar\";\nimport Results from \"./results\";\nimport React, {useState, useEffect} from 'react';\nimport { notification } from 'antd';\n\nfunction Dashboard() {\n\n  // https://boiling-waters-15789.herokuapp.com/\n  \n  let apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState();\n  const [questions, setQuestions] = useState([]);\n  const [selectedQuestion, setSelectedQuestion] = useState();\n  const [answers, setAnswers] = useState([]);\n  const [inputQuestionText, setInputQuestionText] = useState('');\n  const [inputAnswerText, setInputAnswerText] = useState('');\n  const [token, setToken] = useState();\n  const [userId, setUserId] = useState();\n  const [filter, setFilter] = useState(false);\n\n  const fetchCategories = async () => {\n    let res = await fetch(`${apiUrl}/api/v1/categories?token=${localStorage.getItem('token')}`);\n    let data = await res.json();\n    console.log(data);\n    setCategories(data);\n  }\n  \n  const fetchUserId = async () => {\n    let res = await fetch(`${apiUrl}/api/v1/users/me?token=${localStorage.getItem('token')}`);\n    let user = await res.json();\n    console.log(\"The current user is\",user.userId);\n    setUserId(user.userId)\n  }\n\n  const fetchQuestions = async () => {\n    console.log(selectedCategory);\n    if(selectedCategory){\n      let res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions?token=${token}`);\n      let data = await res.json();\n      console.log(data);\n      setQuestions(data.reverse());\n      setFilter(false);\n    }\n    \n  }\n\n  const filterUserQuestions = async () => {\n    if(!filter){\n      let res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions?token=${token}&userId=${userId}`);\n      let data = await res.json();\n      console.log(data);\n      setQuestions(data.reverse());\n      setFilter(true);\n    } else {\n      fetchQuestions();\n    }\n    \n  }\n\n  const fetchAnswers = async (questionId) => {\n    console.log(questionId);\n    if(questionId){\n      let res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions/${questionId}/answers?token=${token}`);\n      let data = await res.json();\n      console.log(data);\n      setAnswers(data.reverse());\n    } \n    \n  }\n\n  const createNewQuestion = async () => {\n    console.log(selectedCategory);\n    if(inputQuestionText === ''){\n      notification['error']({\n        message:'Alert',\n        description:\n        `Type in your question first!`,\n      })\n    }\n\n    if(selectedCategory && inputQuestionText !== ''){\n      let questionBody = { \n        questionText: inputQuestionText,\n        userId: userId\n      }\n\n      let options = {\n        method: 'POST',\n        body: JSON.stringify(questionBody),\n        headers: {}\n      };\n      options.headers[\"Accept\"] = \"application/json, text/plain, */*\";\n      options.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n      console.log(options);\n      \n      const res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions?token=${token}`, options);\n      let data = await res.json();\n      console.log(data);\n      fetchQuestions();\n      setInputQuestionText('');\n      notification['success']({\n        message:'Thank you',\n        description:\n        `Your question was successfully posted!`,\n      })\n\n    }\n    \n  }\n\n  const createNewAnswer = async (questionId) => {\n    console.log(selectedQuestion);\n    if(inputAnswerText == ''){\n      notification['error']({\n        message:'Alert',\n        description:\n        `Type in your answer first!`,\n      })\n    }\n\n    if(questionId && inputAnswerText !== ''){\n      let answerBody = { answerText: inputAnswerText }\n\n      let options = {\n        method: 'POST',\n        body: JSON.stringify(answerBody),\n        headers: {}\n      };\n      options.headers[\"Accept\"] = \"application/json, text/plain, */*\";\n      options.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n      console.log(options);\n\n      const res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions/${questionId}/answers?token=${token}`, options);\n      let data = await res.json();\n      console.log(data);\n      fetchAnswers(questionId);\n      fetchQuestions();\n      setInputAnswerText('');\n      notification['success']({\n        message:'Thank you',\n        description:\n        `Your answer was successfully posted!`,\n      })\n    \n    }\n  }\n\n  const deleteSelectedQuestion = async (questionId) => {\n    console.log(selectedCategory);\n    console.log(questionId);\n    await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions/${questionId}?token=${token}&userId=${userId}`, \n    {method: 'DELETE'});\n    fetchQuestions();\n    notification['success']({\n      message:'Deleted',\n      description:\n      `Your question was successfully deleted!`,\n    })\n  }\n\n  const isLoggedIn = () => {\n    if(localStorage.getItem('token')){\n      setToken(localStorage.getItem('token'));\n      return true;\n    } else{\n      return false;\n    }\n  }\n\n  const logOut = () => {\n    localStorage.removeItem('token');\n    window.location.href = '/';\n  }\n\n  function callback(questionId) {\n    console.log(questionId);\n    fetchAnswers(questionId);\n  }\n\n  useEffect(() => {\n    if(isLoggedIn()){\n      fetchUserId();\n      fetchCategories();\n    } else{\n      window.location.href = '/'\n    }\n    \n    \n  }, [])\n\n  useEffect(() => {\n    fetchQuestions();\n  }, [selectedCategory])\n\n  useEffect(() => {\n    fetchAnswers();\n  }, [selectedQuestion])\n\n  // Empty square brackets leads to running once on load\n  // If someStateVariable changes, this function will load\n  // Use effect may be dependent for multiple variables  \n  \n  return (\n    <>\n      {token && <div>\n        <Navbar logOut={logOut}/>\n\n        <div className={\"grid grid-cols-12\"}>\n\n          <Sidebar categories={categories}\n          selectedCategory={selectedCategory}\n          setSelectedCategory={setSelectedCategory}\n          setSelectedQuestion={setSelectedQuestion}\n          filterUserQuestions={filterUserQuestions}/>\n          \n          <Results selectedCategory={selectedCategory}\n          inputQuestionText={inputQuestionText}\n          setInputQuestionText={setInputQuestionText}\n          createNewQuestion={createNewQuestion}\n          callback={callback}\n          questions={questions}\n          userId={userId}\n          deleteSelectedQuestion={deleteSelectedQuestion}\n          inputAnswerText={inputAnswerText}\n          setInputAnswerText={setInputAnswerText}\n          createNewAnswer={createNewAnswer}\n          answers={answers}/>\n\n        </div>\n      </div>}\n    </>\n  );\n}\n\nexport default Dashboard;\n","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\navbar.js",[],"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\sidebar.js",["44"],"import './App.css';\n\nfunction Sidebar(props) {\n\n  return (\n  <>\n    <div className={\"col-start-2 col-span-10 md:col-start-1 md:col-span-3 lg:col-span-2 p-4\"}>\n      <ul>\n        {props.categories.map((category, index) => {\n          return <li key={index} className={category.id == props.selectedCategory ? \n            \"rounded border my-2 p-2 cursor-pointer bg-blue-500 hover:bg-blue-400 text-white text-center font-bold\" : \n            \"rounded border my-2 p-2 cursor-pointer text-center\"} \n            onClick={() => {\n              props.setSelectedCategory(category.id);\n              props.setSelectedQuestion('');\n            }}>\n              {category.name}\n            </li>                \n          })}\n          \n        {props.selectedCategory && <li className={'rounded border my-2 p-2 cursor-pointer bg-gray-500 hover:bg-gray-400 text-white text-center font-bold'} onClick={props.filterUserQuestions}>\n          Filter\n        </li>}\n      </ul>\n    </div>\n  </>\n  );\n}\n\nexport default Sidebar;\n","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\results.js",["45"],"import './App.css';\nimport { Button, List, Collapse } from 'antd';\nconst { Panel } = Collapse;\n\nfunction Results(props) {\n\n  return (\n  <>\n    <div className={\"col-span-full md:col-span-9 lg:col-span-10 p-4 md:pt-6\"}>\n      <ul>\n        {/* Question Input Bar */}\n        <div className={\"grid grid-cols-12 gap-4\"}>\n          {props.selectedCategory && <input value={props.inputQuestionText} onChange={(event) => {\n            props.setInputQuestionText(event.currentTarget.value);\n            }} type=\"text\" className={'col-span-full md:col-span-9 lg:col-span-10 border rounded w-full border p-1'}/>}\n          {props.selectedCategory && <Button type={'primary'} className={'col-start-4 col-span-6 md:col-span-3 lg:col-span-2 cursor-pointer'} onClick={props.createNewQuestion}>New Question</Button>}\n        </div>\n        <br/>            \n        \n        {/* Responses w/ Answers & Input Bar */}             \n        {props.selectedCategory && <Collapse onChange={props.callback} accordion>\n          {props.questions && props.questions.map((question, index) => {\n            return <Panel key={question.id} header={<div className={\"grid grid-cols-12 gap-2\"}>\n              <div className={\"col-span-8 md:col-span-10 xl:col-span-11\"}>\n                <span>{question.questionText}</span>\n                {question.Answers.length > 0 && <span> \n                  &nbsp;- Number of Answers: {question.Answers.length}\n                </span>}\n              </div>\n              {props.userId == question.userId && <span className={\"col-span-4 md:col-span-2 xl:col-span-1\"}>\n                <Button type={\"danger\"} onClick={() => {props.deleteSelectedQuestion(question.id);}}>\n                  Delete\n                </Button>\n              </span>}\n            </div>}>\n              <List\n              size=\"small\"\n              header={<div className={'font-bold'}>Answers List</div>}\n              footer={<div className={\"grid grid-cols-12 gap-4\"}>\n                <input value={props.inputAnswerText} onChange={(event) => {\n                  props.setInputAnswerText(event.currentTarget.value);\n                  }} type=\"text\" className={'border rounded p-1 col-span-full md:col-span-9 lg:col-span-10'}/>\n                <Button type={'primary'} className={\"col-start-4 col-span-6 md:col-span-3 lg:col-span-2 cursor-pointer\"}\n                  onClick={() => {props.createNewAnswer(question.id);}}>\n                    Add Answer\n                </Button>\n              </div>}\n              bordered\n              dataSource={props.answers}\n              renderItem={answer => <List.Item>\n                <div>\n                  {answer.answerText}\n                </div>\n\n              </List.Item>}\n              />\n            </Panel>})}\n\n        </Collapse>}\n        \n        {!props.selectedCategory && <h1 className={'text-center text-xl uppercase tracking-wider text-blue-500'}>Select a subject to get started</h1>}\n\n      </ul>\n    </div>\n  </>\n  );\n}\n\nexport default Results;\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":6,"column":3,"nodeType":"52","messageId":"53","endLine":6,"endColumn":7},{"ruleId":"50","severity":1,"message":"54","line":10,"column":16,"nodeType":"52","messageId":"53","endLine":10,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":126,"column":31,"nodeType":"57","messageId":"58","endLine":126,"endColumn":33},{"ruleId":"55","severity":1,"message":"59","line":117,"column":24,"nodeType":"57","messageId":"58","endLine":117,"endColumn":26},{"ruleId":"60","severity":1,"message":"61","line":193,"column":6,"nodeType":"62","endLine":193,"endColumn":8,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"64","line":197,"column":6,"nodeType":"62","endLine":197,"endColumn":24,"suggestions":"65"},{"ruleId":"60","severity":1,"message":"66","line":201,"column":6,"nodeType":"62","endLine":201,"endColumn":24,"suggestions":"67"},{"ruleId":"55","severity":1,"message":"59","line":10,"column":57,"nodeType":"57","messageId":"58","endLine":10,"endColumn":59},{"ruleId":"55","severity":1,"message":"59","line":30,"column":29,"nodeType":"57","messageId":"58","endLine":30,"endColumn":31},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchCategories' and 'fetchUserId'. Either include them or remove the dependency array.","ArrayExpression",["70"],"React Hook useEffect has a missing dependency: 'fetchQuestions'. Either include it or remove the dependency array.",["71"],"React Hook useEffect has a missing dependency: 'fetchAnswers'. Either include it or remove the dependency array.",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [fetchCategories, fetchUserId]",{"range":"79","text":"80"},"Update the dependencies array to be: [fetchQuestions, selectedCategory]",{"range":"81","text":"82"},"Update the dependencies array to be: [fetchAnswers, selectedQuestion]",{"range":"83","text":"84"},[5509,5511],"[fetchCategories, fetchUserId]",[5561,5579],"[fetchQuestions, selectedCategory]",[5627,5645],"[fetchAnswers, selectedQuestion]"]