[{"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\index.js":"1","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\reportWebVitals.js":"2","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\App.js":"3","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\dashboard.js":"4","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\navbar.js":"5","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\sidebar.js":"6","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\results.js":"7"},{"size":529,"mtime":1616638624378,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":5484,"mtime":1617597651155,"results":"11","hashOfConfig":"9"},{"size":6796,"mtime":1617596772070,"results":"12","hashOfConfig":"9"},{"size":638,"mtime":1617596462649,"results":"13","hashOfConfig":"9"},{"size":1012,"mtime":1617597533047,"results":"14","hashOfConfig":"9"},{"size":2996,"mtime":1617596431020,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"txrage",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\index.js",[],["33","34"],"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\reportWebVitals.js",[],"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\App.js",["35","36","37"],"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\dashboard.js",["38","39","40","41"],"import './App.css';\nimport Navbar from \"./navbar\";\nimport Sidebar from \"./sidebar\";\nimport Results from \"./results\";\nimport React, {useState, useEffect} from 'react';\nimport { notification } from 'antd';\n\nfunction Dashboard() {\n\n  // https://boiling-waters-15789.herokuapp.com/\n  \n  let apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState();\n  const [questions, setQuestions] = useState([]);\n  const [selectedQuestion, setSelectedQuestion] = useState();\n  const [answers, setAnswers] = useState([]);\n  const [inputQuestionText, setInputQuestionText] = useState('');\n  const [inputAnswerText, setInputAnswerText] = useState('');\n  const [token, setToken] = useState();\n  const [userId, setUserId] = useState();\n  const [filter, setFilter] = useState(false);\n\n  const fetchCategories = async () => {\n    let res = await fetch(`${apiUrl}/api/v1/categories?token=${localStorage.getItem('token')}`);\n    let data = await res.json();\n    console.log(data);\n    setCategories(data);\n  }\n  \n  const fetchUserId = async () => {\n    let res = await fetch(`${apiUrl}/api/v1/users/me?token=${localStorage.getItem('token')}`);\n    let user = await res.json();\n    console.log(\"The current user is\",user.userId);\n    setUserId(user.userId)\n  }\n\n  const fetchQuestions = async () => {\n    console.log(selectedCategory);\n    if(selectedCategory){\n      let res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions?token=${token}`);\n      let data = await res.json();\n      console.log(data);\n      setQuestions(data.reverse());\n      setFilter(false);\n    }\n    \n  }\n\n  const filterUserQuestions = async () => {\n    if(!filter){\n      let res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions?token=${token}&userId=${userId}`);\n      let data = await res.json();\n      console.log(data);\n      setQuestions(data.reverse());\n      setFilter(true);\n    } else {\n      fetchQuestions();\n    }\n    \n  }\n\n  const fetchAnswers = async (questionId) => {\n    console.log(questionId);\n    if(questionId){\n      let res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions/${questionId}/answers?token=${token}`);\n      let data = await res.json();\n      console.log(data);\n      setAnswers(data.reverse());\n    } \n    \n  }\n\n  const createNewQuestion = async () => {\n    console.log(selectedCategory);\n    if(inputQuestionText === ''){\n      notification['error']({\n        message:'Alert',\n        description:\n        `Type in your question first!`,\n      })\n    }\n\n    if(selectedCategory && inputQuestionText !== ''){\n      let questionBody = { \n        questionText: inputQuestionText,\n        userId: userId\n      }\n\n      let options = {\n        method: 'POST',\n        body: JSON.stringify(questionBody),\n        headers: {}\n      };\n      options.headers[\"Accept\"] = \"application/json, text/plain, */*\";\n      options.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n      console.log(options);\n      \n      const res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions?token=${token}`, options);\n      let data = await res.json();\n      console.log(data);\n      fetchQuestions();\n      setInputQuestionText('');\n      notification['success']({\n        message:'Thank you',\n        description:\n        `Your question was successfully posted!`,\n      })\n\n    }\n    \n  }\n\n  const createNewAnswer = async (questionId) => {\n    console.log(selectedQuestion);\n    if(inputAnswerText == ''){\n      notification['error']({\n        message:'Alert',\n        description:\n        `Type in your answer first!`,\n      })\n    }\n\n    if(questionId && inputAnswerText !== ''){\n      let answerBody = { answerText: inputAnswerText }\n\n      let options = {\n        method: 'POST',\n        body: JSON.stringify(answerBody),\n        headers: {}\n      };\n      options.headers[\"Accept\"] = \"application/json, text/plain, */*\";\n      options.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n      console.log(options);\n\n      const res = await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions/${questionId}/answers?token=${token}`, options);\n      let data = await res.json();\n      console.log(data);\n      fetchAnswers(questionId);\n      fetchQuestions();\n      setInputAnswerText('');\n      notification['success']({\n        message:'Thank you',\n        description:\n        `Your answer was successfully posted!`,\n      })\n    \n    }\n  }\n\n  const deleteSelectedQuestion = async (questionId) => {\n    console.log(selectedCategory);\n    console.log(questionId);\n    await fetch(`${apiUrl}/api/v1/categories/${selectedCategory}/questions/${questionId}?token=${token}&userId=${userId}`, \n    {method: 'DELETE'});\n    fetchQuestions();\n    notification['success']({\n      message:'Deleted',\n      description:\n      `Your question was successfully deleted!`,\n    })\n  }\n\n  const isLoggedIn = () => {\n    if(localStorage.getItem('token')){\n      setToken(localStorage.getItem('token'));\n      return true;\n    } else{\n      return false;\n    }\n  }\n\n  const logOut = () => {\n    localStorage.removeItem('token');\n    window.location.href = '/';\n  }\n\n  function callback(questionId) {\n    console.log(questionId);\n    fetchAnswers(questionId);\n  }\n\n  useEffect(() => {\n    if(isLoggedIn()){\n      fetchUserId();\n      fetchCategories();\n    } else{\n      window.location.href = '/'\n    }\n    \n    \n  }, [])\n\n  useEffect(() => {\n    fetchQuestions();\n  }, [selectedCategory])\n\n  useEffect(() => {\n    fetchAnswers();\n  }, [selectedQuestion])\n\n  // Empty square brackets leads to running once on load\n  // If someStateVariable changes, this function will load\n  // Use effect may be dependent for multiple variables  \n  \n  return (\n    <>\n      {token && <div>\n        <Navbar logOut={logOut}/>\n\n        <div className={\"grid grid-cols-12\"}>\n\n          <Sidebar categories={categories}\n          selectedCategory={selectedCategory}\n          setSelectedCategory={setSelectedCategory}\n          setSelectedQuestion={setSelectedQuestion}\n          filterUserQuestions={filterUserQuestions}/>\n          \n          <Results selectedCategory={selectedCategory}\n          inputQuestionText={inputQuestionText}\n          setInputQuestionText={setInputQuestionText}\n          createNewQuestion={createNewQuestion}\n          callback={callback}\n          questions={questions}\n          userId={userId}\n          deleteSelectedQuestion={deleteSelectedQuestion}\n          inputAnswerText={inputAnswerText}\n          setInputAnswerText={setInputAnswerText}\n          createNewAnswer={createNewAnswer}\n          answers={answers}/>\n\n        </div>\n      </div>}\n    </>\n  );\n}\n\nexport default Dashboard;\n","C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\navbar.js",[],"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\sidebar.js",["42"],"C:\\Users\\gabri\\OneDrive\\Documents\\Gabriel's Documents\\Git_Repos\\Capstone Project\\capstone-project-web\\src\\results.js",["43"],"import './App.css';\nimport { Button, List, Collapse } from 'antd';\nconst { Panel } = Collapse;\n\nfunction Results(props) {\n\n  return (\n  <>\n    <div className={\"col-span-full md:col-span-9 lg:col-span-10 p-4 md:pt-6\"}>\n      <ul>\n        {/* Question Input Bar */}\n        <div className={\"grid grid-cols-12 gap-4\"}>\n          {props.selectedCategory && <input value={props.inputQuestionText} onChange={(event) => {\n            props.setInputQuestionText(event.currentTarget.value);\n            }} type=\"text\" className={'col-span-full md:col-span-9 lg:col-span-10 border rounded w-full border p-1'}/>}\n          {props.selectedCategory && <Button type={'primary'} className={'col-start-4 col-span-6 md:col-span-3 lg:col-span-2 cursor-pointer'} onClick={props.createNewQuestion}>New Question</Button>}\n        </div>\n        <br/>            \n        \n        {/* Responses w/ Answers & Input Bar */}             \n        {props.selectedCategory && <Collapse onChange={props.callback} accordion>\n          {props.questions && props.questions.map((question, index) => {\n            return <Panel key={question.id} header={<div className={\"grid grid-cols-12 gap-2\"}>\n              <div className={\"col-span-8 md:col-span-10 xl:col-span-11\"}>\n                <span>{question.questionText}</span>\n                {question.Answers.length > 0 && <span> \n                  &nbsp;- Number of Answers: {question.Answers.length}\n                </span>}\n              </div>\n              {props.userId == question.userId && <span className={\"col-span-4 md:col-span-2 xl:col-span-1\"}>\n                <Button type={\"danger\"} onClick={() => {props.deleteSelectedQuestion(question.id);}}>\n                  Delete\n                </Button>\n              </span>}\n            </div>}>\n              <List\n              size=\"small\"\n              header={<div className={'font-bold'}>Answers List</div>}\n              footer={<div className={\"grid grid-cols-12 gap-4\"}>\n                <input value={props.inputAnswerText} onChange={(event) => {\n                  props.setInputAnswerText(event.currentTarget.value);\n                  }} type=\"text\" className={'border rounded p-1 col-span-full md:col-span-9 lg:col-span-10'}/>\n                <Button type={'primary'} className={\"col-start-4 col-span-6 md:col-span-3 lg:col-span-2 cursor-pointer\"}\n                  onClick={() => {props.createNewAnswer(question.id);}}>\n                    Add Answer\n                </Button>\n              </div>}\n              bordered\n              dataSource={props.answers}\n              renderItem={answer => <List.Item>\n                <div>\n                  {answer.answerText}\n                </div>\n\n              </List.Item>}\n              />\n            </Panel>})}\n\n        </Collapse>}\n        \n        {!props.selectedCategory && <h1 className={'text-center text-xl uppercase tracking-wider text-blue-500'}>Select a subject to get started</h1>}\n\n      </ul>\n    </div>\n  </>\n  );\n}\n\nexport default Results;\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":6,"column":3,"nodeType":"50","messageId":"51","endLine":6,"endColumn":7},{"ruleId":"48","severity":1,"message":"52","line":10,"column":16,"nodeType":"50","messageId":"51","endLine":10,"endColumn":25},{"ruleId":"53","severity":1,"message":"54","line":126,"column":31,"nodeType":"55","messageId":"56","endLine":126,"endColumn":33},{"ruleId":"53","severity":1,"message":"57","line":117,"column":24,"nodeType":"55","messageId":"56","endLine":117,"endColumn":26},{"ruleId":"58","severity":1,"message":"59","line":193,"column":6,"nodeType":"60","endLine":193,"endColumn":8,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"62","line":197,"column":6,"nodeType":"60","endLine":197,"endColumn":24,"suggestions":"63"},{"ruleId":"58","severity":1,"message":"64","line":201,"column":6,"nodeType":"60","endLine":201,"endColumn":24,"suggestions":"65"},{"ruleId":"53","severity":1,"message":"57","line":10,"column":57,"nodeType":"55","messageId":"56","endLine":10,"endColumn":59},{"ruleId":"53","severity":1,"message":"57","line":30,"column":29,"nodeType":"55","messageId":"56","endLine":30,"endColumn":31},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchCategories' and 'fetchUserId'. Either include them or remove the dependency array.","ArrayExpression",["68"],"React Hook useEffect has a missing dependency: 'fetchQuestions'. Either include it or remove the dependency array.",["69"],"React Hook useEffect has a missing dependency: 'fetchAnswers'. Either include it or remove the dependency array.",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [fetchCategories, fetchUserId]",{"range":"77","text":"78"},"Update the dependencies array to be: [fetchQuestions, selectedCategory]",{"range":"79","text":"80"},"Update the dependencies array to be: [fetchAnswers, selectedQuestion]",{"range":"81","text":"82"},[5509,5511],"[fetchCategories, fetchUserId]",[5561,5579],"[fetchQuestions, selectedCategory]",[5627,5645],"[fetchAnswers, selectedQuestion]"]